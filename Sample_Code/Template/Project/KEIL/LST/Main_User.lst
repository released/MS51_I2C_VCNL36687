C51 COMPILER V9.55   MAIN_USER                                                             11/08/2021 17:30:57 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN_USER
OBJECT MODULE PLACED IN .\Output\Main_User.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\VCNL36687\Main_User.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\..\
                    -..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\..\Project;..\VCNL36687) DEBUG OBJECTEXTEND PRINT(.\LST\M
                    -ain_User.lst) TABS(2) OBJECT(.\Output\Main_User.obj)

line level    source

   1          
   2          #include "string.h"
   3          #include "Main_User.h"
   4          
   5          #include "I2C_Functions.h"
   6          //#include "MS51_16K.h"
   7          #include "i2c_conf.h"
   8          //Global Variables
   9          
  10          int I2C_Bus = 0;
  11          
  12          //Variables for Offset Value
  13          //int CalibValue = 0;
  14          //int AverageCount = 10; //Change the average count to the needed number of offset measurement
  15          
  16          void HAL_Delay(unsigned int timing)
  17          {
  18   1      //  Timer2_Delay(SYS_CLOCK,16,1,timing*1000);
  19   1        Timer_Delay(SYS_CLOCK,timing,1000);
  20   1      }
  21          
  22          int WriteI2C_Bus(TransferData *pData)
  23          {
  24   1        I2Cx_Write_Multi_ToSlave(pData->Slave_Address , pData->RegisterAddress , pData->WData , 2);
  25   1        HAL_Delay(5);
  26   1        return TRUE;
  27   1      }
  28          
  29          int ReadI2C_Bus (TransferData *pData)
  30          {
  31   1        I2Cx_Read_Multi_FromSlave(pData->Slave_Address , pData->RegisterAddress , pData->RData , 2);
  32   1        HAL_Delay(5); 
  33   1        return TRUE;
  34   1      }
  35          
  36          unsigned int VCNL36687_GET_PS_Data(void)
  37          {
  38   1        TransferData VCNL36687_Data;
  39   1        VCNL36687_Data.Slave_Address = VCNL36687_SlaveAddress;
  40   1        VCNL36687_Data.RegisterAddress = VCNL36687_PS_DATA;
  41   1          VCNL36687_Data.Select_I2C_Bus = I2C_Bus;
  42   1        ReadI2C_Bus(&VCNL36687_Data);
  43   1        return (VCNL36687_Data.RData[1]<<8|VCNL36687_Data.RData[0]);
  44   1      }
  45          
  46          void VCNL36687_SET_THRESHOLD(unsigned char reg , unsigned char value_lsb, unsigned char value_msb)
  47          {
  48   1      
  49   1        TransferData VCNL36687_Data;
  50   1        VCNL36687_Data.Slave_Address = VCNL36687_SlaveAddress;
  51   1        VCNL36687_Data.RegisterAddress = reg;
  52   1          VCNL36687_Data.Select_I2C_Bus = I2C_Bus;
  53   1        VCNL36687_Data.WData[0] = value_lsb;
C51 COMPILER V9.55   MAIN_USER                                                             11/08/2021 17:30:57 PAGE 2   

  54   1        VCNL36687_Data.WData[1] = value_msb;
  55   1        WriteI2C_Bus(&VCNL36687_Data);
  56   1      }
  57          
  58          void VCNL36687_SET_CONF5(unsigned char conf5_L, unsigned char conf5_M)
  59          {
  60   1      
  61   1        TransferData VCNL36687_Data;
  62   1        VCNL36687_Data.Slave_Address = VCNL36687_SlaveAddress;
  63   1        VCNL36687_Data.RegisterAddress = VCNL36687_PS_CONF5;
  64   1          VCNL36687_Data.Select_I2C_Bus = I2C_Bus;
  65   1        VCNL36687_Data.WData[0] = conf5_L;
  66   1        VCNL36687_Data.WData[1] = conf5_M;
  67   1        WriteI2C_Bus(&VCNL36687_Data);
  68   1      }
  69          
  70          void VCNL36687_SET_CONF1(unsigned char conf1, unsigned char conf2)
  71          {
  72   1      
  73   1        TransferData VCNL36687_Data;
  74   1        VCNL36687_Data.Slave_Address = VCNL36687_SlaveAddress;
  75   1        VCNL36687_Data.RegisterAddress = VCNL36687_PS_CONF1;
  76   1          VCNL36687_Data.Select_I2C_Bus = I2C_Bus;
  77   1        VCNL36687_Data.WData[0] = conf1;
  78   1        VCNL36687_Data.WData[1] = conf2;
  79   1        WriteI2C_Bus(&VCNL36687_Data);
  80   1      }
  81          
  82          void VCNL36687_SET_VCSEL(unsigned char conf3, unsigned char conf4)
  83          {
  84   1      
  85   1        TransferData VCNL36687_Data;
  86   1        VCNL36687_Data.Slave_Address = VCNL36687_SlaveAddress;
  87   1        VCNL36687_Data.RegisterAddress = VCNL36687_PS_CONF4;
  88   1          VCNL36687_Data.Select_I2C_Bus = I2C_Bus;
  89   1        VCNL36687_Data.WData[0] = conf3;
  90   1        VCNL36687_Data.WData[1] = conf4;
  91   1        WriteI2C_Bus(&VCNL36687_Data);
  92   1      }
  93          
  94          
  95          void INIT_VCNL36687(void)
  96          {
  97   1        #if 1
  98   1        VCNL36687_SET_VCSEL(VCNL36687_PS_Auto , VCNL36687_VCSEL_I_20mA );
  99   1        
 100   1        VCNL36687_SET_CONF1(VCNL36687_PS_PERIOD_8ms | VCNL36687_PS_ON , VCNL36687_PS_8T | VCNL36687_PS_MPS_1 | VC
             -NL36687_PS_ITB_25);
 101   1        VCNL36687_SET_CONF5(VCNL36887_POR_S , 0x00);
 102   1        #else //https://github.com/mehtajainam/VCNL36687
                VCNL36687_SET_VCSEL(VCNL36687_PS_Auto , VCNL36687_PS_HD_EN | VCNL36687_VCSEL_I_20mA );
                
                VCNL36687_SET_CONF1(VCNL36687_PS_PERIOD_32ms | VCNL36687_PS_ON , VCNL36687_PS_2T | VCNL36687_PS_MPS_1 | V
             -CNL36687_PS_ITB_25);
                VCNL36687_SET_CONF5(VCNL36887_POR_S , 0x00);
                
                VCNL36687_SET_THRESHOLD(VCNL36687_PS_THDL , 0x88 , 0x13 );
                VCNL36687_SET_THRESHOLD(VCNL36687_PS_THDH , 0xE0 , 0x2E );  
                #endif
 111   1        
 112   1      }
 113          
C51 COMPILER V9.55   MAIN_USER                                                             11/08/2021 17:30:57 PAGE 3   

 114          //Print Function
 115          void PRINT_VCNL36687(void)
 116          {
 117   1        unsigned int result = 0;
 118   1        
 119   1        result = VCNL36687_GET_PS_Data();
 120   1      
 121   1        if ((result == 0xC1C1) || (result == 0x588))
 122   1        {
 123   2          printf("*\r\n");
 124   2        }
 125   1        else
 126   1        {
 127   2          printf("H :0x%2BX,L : 0x%2BX(dec: %5u)\r\n" , HIBYTE(result),LOBYTE(result),(unsigned int)result );
 128   2      //    printf("(dec: %5u)\r\n" , (unsigned int)result );
 129   2        }
 130   1        
 131   1      }
 132          
 133          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    432    ----
   CONSTANT SIZE    =     37    ----
   XDATA SIZE       =      2      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
